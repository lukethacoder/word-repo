[{"content":"\r\n![Salesforce Trekken: Banner](/salesforce-trekken-cms-migration-tool/banner.png)\r\n\r\nThe Salesforce CMS data migration experience is lacking. There is no bulk export, and there is no sorting/filtering of content and you are sent an email link instead of being able to directly download the zip file.\r\n\r\nSalesforce Trekken aims to rethink the Salesforce CMS migration experience. Using modern web technologies and thoughtful a user experience, migrating Salesforce CMS data has never been easier.\r\n\r\n## How does it work?\r\n\r\nSalesforce Trekken allows users to authenticate using one of two methods:\r\n\r\n- The [sfdx cli](https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli.htm)\r\n- Access Token (and Instance URL)\r\n\r\nThe [Salesforce REST API](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_rest.htm) is used to fetch CMS Channels and the CMS Content after a specific channel has been selected.\r\n\r\n## Features\r\n\r\n- Multiple Authentication Methods (`sfdx cli` or ACCESS_TOKEN)\r\n- Channel Selection: Choose the right CMS Channel to export data from\r\n- Feature Rich Export Table\r\n- Bundled Zip file export, ready to be imported into your target org.\r\n\r\n## Walkthrough\r\n\r\n#### Select Your Authentication Method\r\n\r\n![Salesforce Trekken: Select Authetnication Method Screenshot](/salesforce-trekken-cms-migration-tool/authentication.png)\r\n\r\n#### Select An Org\r\n\r\n![Salesforce Trekken: Select An Org Screenshot](/salesforce-trekken-cms-migration-tool/select-an-org.png)\r\n\r\n#### Select A CMS Channel\r\n\r\n![Salesforce Trekken: Select A CMS Channel Screenshot](/salesforce-trekken-cms-migration-tool/select-channel.png)\r\n\r\n#### Search/Filter/Sort and Select Content\r\n\r\n![Salesforce Trekken: Select CMS Content Screenshot](/salesforce-trekken-cms-migration-tool/select-cms-content.png)\r\n\r\n#### Select An Output Folder\r\n\r\nand whether to include images as part of the export.\r\n\r\n![Salesforce Trekken: Select An Output Folder Screenshot](/salesforce-trekken-cms-migration-tool/select-output-folder.png)\r\n\r\n#### Success\r\n\r\nEither open the source folder or start over.\r\n\r\n![Salesforce Trekken: Successful Export Screenshot](/salesforce-trekken-cms-migration-tool/success.png)\r\n\r\nYour content is now ready to import into your target org.\r\n\r\nW> If you are working with `cms_image`, make sure you import your images zip file first\r\n\r\n## Closing\r\n\r\nNow you've seen the powers of Salesforce Trekken and its improved user experience compared to the standard salesforce experience.\r\n\r\nWant to find out more and/or download, checkout the [Salesforce Trekken site](https://trekken.lukesecomb.digital/)\r\n","slug":"salesforce-trekken-cms-migration-tool","data":{"title":"Salesforce Trekken: Salesforce CMS Migration Tool","date":"2023-01-13T00:00:00.000Z","color":"#c23a3a","description":"Exporing the new Salesforce CMS Migration Tool built with Tauri, React, TailwindCSS & Vite","excerpt":"Exporing the new Salesforce CMS Migration Tool","tags":["salesforce","tool"],"slug":"salesforce-trekken-cms-migration-tool","readingTime":{"text":"2 min read","minutes":1.485,"time":89100,"words":297},"dateFormatted":"13 January 2023","editedDate":"","editedDateFormatted":""}},{"content":"\r\nPlatforms come and go, and Spotify most likely wont be around forever. What would you do if you woke up tomorrow and Spotify was gone. I know I wouldn't be too happy, after spending countless hours carefully curating well over 200 playlists.\r\n\r\nSo, to save your playlists from being erased from the internet forever, lets create a small python script to back them up. This post outlines the steps to configue and a basic walkthrough of my [spotify-playlist-backup](https://github.com/lukethacoder/spotify-playlist-backup) project.\r\n\r\n[![spotify-playlist-backup project banner](https://github.com/lukethacoder/spotify-playlist-backup/raw/main/docs/banner.jpg)](https://github.com/lukethacoder/spotify-playlist-backup)\r\n\r\n## Spotify Developer Application\r\n\r\nBefore we can jump into the code we need to setup our own [Spotify Developer Application](https://developer.spotify.com/dashboard/applications). This will require you to have a Spotify account (a free account should work). Once logged in, create a new application and save the `CLIENT_ID` and `CLIENT_SECRET` for later. Make sure you set `http://localhost:3000/callback` as a return url for your application.\r\n\r\n![spotify dashboard application page](https://github.com/lukethacoder/spotify-playlist-backup/raw/main/docs/spotify-developer-app-dashboard.jpg)\r\n\r\n## Into the code\r\n\r\nClone the [spotify-playlist-backup](https://github.com/lukethacoder/spotify-playlist-backup) repo and create a new `.env` file. Copy and paste in the following code snippet and replace the values with your configuration.\r\n\r\n```env\r\n# .env file\r\n# Values from your Spotify Developer Application\r\nSPOTIFY_CLIENT_ID=laboriselitutenimdoculpa\r\nSPOTIFY_CLIENT_SECRET=laboriselitutenimdoculpa\r\n\r\n# Your Spotify Username\r\nSPOTIFY_USERNAME=12345678910\r\n\r\n# Your Spotify Password\r\nSPOTIFY_PASSWORD=abcdefghijklmnopqrstuvwxyz\r\n\r\n# Comma separated list of usernames of playlist authors.\r\n# This allows you to back up other peoples playlists (that you follow) if you want.\r\n# if left blank, all of your followed/created playlists will be backed up.\r\nSPOTIFY_OWNER_IDS=snoopdogg,drdre,spotify\r\n```\r\n\r\n## Run the script\r\n\r\nOnce you have setup the `.env` file, you're ready to run the script.\r\n\r\n```shell\r\npython script.py\r\n```\r\n\r\n> This assumes you already have python installed.\r\n\r\nYes, it is that easy. After running the above script you will have a local copy of all your playlist data in beautiful `json` format.\r\n\r\n## Github Action setup\r\n\r\nBefore your Github Action will run successfully, you must setup the above `.env` variables correctly within the repo.\r\n\r\nW> Make sure your fork is a private repository\r\n\r\n![Github actions dashboard screenshot](https://github.com/lukethacoder/spotify-playlist-backup/raw/main/docs/github-actions-secrets-setup.jpg)\r\n\r\n## Cron Job\r\n\r\nLets go one step further and set our Github Action to run once a week. By default, the CRON Job Github Action is disabled. To enable this within your repo, open the `.github/workflows/python-app.yml` file and uncomment the schedule code block.\r\n\r\n```yaml\r\non:\r\n  schedule:\r\n    # scheduled to run each week at 3am on a Tuesday\r\n    - cron: '0 3 * * 2'\r\n  workflow_dispatch:\r\n    inputs:\r\n      logLevel:\r\n        description: 'Log level'\r\n        required: true\r\n        default: 'warning'\r\n        type: choice\r\n        options:\r\n          - info\r\n          - warning\r\n          - debug\r\n```\r\n\r\n> You can use the <a href='https://crontab.guru/'>crontab</a> tool to calculate when and how often you want to run the Github Action.\r\n","slug":"spotify-playlist-backup-using-github-actions","data":{"title":"Spotify Playlist Backup using Github Actions","description":"Platforms come and go, and Spotify most likely wont be around forever. What would you do if you woke up tomorrow and Spotify was gone.","date":"2022-11-27T00:00:00.000Z","color":"#1db954","excerpt":"What would you do if you woke up tomorrow and Spotify was dead?","tags":["spotify","python","github actions"],"slug":"spotify-playlist-backup-using-github-actions","readingTime":{"text":"3 min read","minutes":2.165,"time":129900,"words":433},"dateFormatted":"27 November 2022","editedDate":"","editedDateFormatted":""}},{"content":"\r\nA quick guide to the first things I'll setup on a fresh windows machine install before doing anything else.\r\n\r\n- [ ] Move OneDrive based folders via regedit ([how to guide](https://appuals.com/fix-cant-move-the-folder-because-there-is-a-folder-in-the-same-location-that-cant-be-redirected/)).\r\n- [ ] Install PowerShell 7 (or the latest version) [Microsoft Documentation](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2).\r\n- [ ] [Set PowerShell `ExecutionPolicy`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.3&viewFallbackFrom=powershell-7.1).\r\n- [ ] Change default terminal editor to VS Code `git config --global core.editor \"code\"`\r\n- [ ] Update Windows Terminal config with [my config](https://github.com/lukethacoder/.../blob/master/profiles.json).\r\n- [ ] Install the [Visual C++ Build Tools](https://visualstudio.microsoft.com/visual-cpp-build-tools/).\r\n- [ ] Install [git](https://git-scm.com/).\r\n- [ ] Install [Fira Code (Nerd Font)](https://www.nerdfonts.com/font-downloads).\r\n- [ ] Install [Oh My Posh](https://ohmyposh.dev/docs/installation/windows) and load in [my config](https://github.com/lukethacoder/.../blob/master/oh-my-posh.omp.json).\r\n- [ ] Install [nvm-windows](https://github.com/coreybutler/nvm-windows) and install node versions as needed\r\n- [ ] Install [`sfdx && sf`](https://developer.salesforce.com/tools/sfdxcli) (NOTE: if you install via `npm || yarn`, you wont get the `sf` cli - this may change in the future).\r\n- [ ] Setup [`git` config files](https://github.com/lukethacoder/.../blob/master/.gitconfig)\r\n- [ ] Setup GPG keys. Ideally use the GPU that comes installed with `git` [documentation](https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification).\r\n\r\nDepending on the machine, I'll run a [choco script](https://github.com/lukethacoder/choco-milk) to bulk install the rest of the software/programs.\r\n","slug":"my-fresh-windows-machine-developer-setup","data":{"title":"My Fresh Windows Machine Developer Setup","date":"2022-11-24T00:00:00.000Z","color":"#476124","description":"A quick guide to the first things I'll setup on a fresh windows machine install before doing anything else.","excerpt":"A quick guide to the first things I'll setup on a fresh windows machine install before doing anything else.","tags":["windows","config"],"slug":"my-fresh-windows-machine-developer-setup","readingTime":{"text":"1 min read","minutes":0.935,"time":56100,"words":187},"dateFormatted":"24 November 2022","editedDate":"","editedDateFormatted":""}},{"content":"\r\nHow the heck do I set up a scratch org using sfdx? Well, you're in the right place.\r\n\r\nFirstly, you will need to have SFDX ([Salesforce CLI](https://developer.salesforce.com/tools/sfdxcli)) installed and VS Code. You will also need your own Salesforce DevHub instance setup (need a hand with setting up your dev hub? check out this [trailhead unit](https://trailhead.salesforce.com/en/content/learn/modules/sfdx_app_dev/sfdx_app_dev_setup_dx).\r\n\r\n## Create a Salesforce DX Project\r\n\r\nThe second step is to create a (SF)DX project.\r\n\r\n```shell\r\nsfdx force:project:create -n YOUR_PROJECT_NAME\r\n```\r\n\r\n## Auth your DevHub\r\n\r\nNext, we need to connect your DevHub with your new project\r\n\r\n```shell\r\nsfdx force:auth:web:login -d -a ALIAS_FOR_YOUR_DEV_HUB -r https://test.salesforce.com\r\n```\r\n\r\n- `-d` sets this as the default Dev Hub.\r\n- `-a` sets this alias for the org.\r\n- `-r` sets the login URL for the org.\r\n\r\n> If you have already auth'd, set your default username using `sfdx force:config:set defaultdevhubusername=lukesfakeemail@force.com`\r\n\r\n## Login To Sandboxes\r\n\r\nIn addition to DebHubs, we can also connect to standard salesforce Sandboxes. This can be handy when it comes to pulling components into your scratch org\r\n\r\n```shell\r\nsfdx force:auth:web:login -r https://test.salesforce.com -a ALIAS_FOR_YOUR_SANDBOX\r\n```\r\n\r\n> Remember, don't use the `-d` flag. If you do, the CLI thinks the org is your Dev Hub, and then you'll see an error when you try to create a scratch org.\r\n\r\nIf `force:auth:web:login` isnt working, use `sfdx force:auth:device:login -r https://test.salesforce.com -a YOUR_ORG_ALIAS` instead.\r\n\r\n## Rename (add) Alias\r\n\r\n```shell\r\nsfdx force:alias:set NEW_ALIAS_FOR_YOUR_SANDBOX=current@sandbox.user.com\r\nsfdx force:alias:set OLD_ALIAS_FOR_YOUR_SANDBOX=\r\n```\r\n\r\n## Logout of Sandboxes\r\n\r\nlogout/remove the sandbox from the `sfdx force:org:list`\r\n\r\n```shell\r\nsfdx force:auth:logout -u ALIAS_FOR_YOUR_SANDBOX\r\n```\r\n\r\n## Create your scratch org\r\n\r\nNow for the fun part, creating your scratch org.\r\n\r\n> if you want to set the scratch org name, or adjust other config options, edit the `./config/project-scratch-def.json` file before progressing\r\n\r\n```shell\r\nsfdx force:org:create -s -v ALIAS_OF_YOUR_DEBHUB -f config/project-scratch-def.json -a ALIAS_FOR_SCRATCH_ORG -d 30 -w 10\r\n```\r\n\r\n- `-v` optional param to choose your DevHub (not needed if you have a default DevHub set)\r\n- `-s` sets this as the default sratch org\r\n- `-f` sets the location for the config file (to build the org)\r\n- `-a` sets the alias for the scratch org\r\n- `-d` sets the expiry to 30 days\r\n- `-w` sets the wait time to 10mins\r\n\r\n> If you already scratch'd an org `sfdx force:config:set defaultusername=lukesfakeemail@force.com`\r\n\r\n## View Scratch Org Config/Details\r\n\r\n```shell\r\nsfdx force:org:display -u SCRATCH_ORG_ALIAS\r\n```\r\n\r\n## Generate Password Scratch Org\r\n\r\n```shell\r\nsfdx force:user:password:generate -u SCRATCH_ORG_ALIAS\r\n```\r\n\r\n## Delete Scratch Org\r\n\r\n```shell\r\nsfdx force:org:delete -u SCRATCH_ORG_ALIAS\r\n```\r\n\r\n## Assign Permission Set\r\n\r\nBefore you can start pushing code, we have to set up some permission sets to allow us.\r\n\r\n```shell\r\nsfdx force:user:permset:assign -n NAME_OF_PERMISSION_SET\r\n```\r\n\r\n> most likely named `SalesConsoleUser` on default scratch orgs\r\n\r\n## Fetch all Metadata from an Org (Metadata API)\r\n\r\n> NOTE: we are using the sfdx-ext plugin which can be found [here](https://github.com/brianedwardsaunders/sfdx-ext)\r\n\r\nFetch the Metadata\r\n\r\n```shell\r\nsfdx ext:mdapi:retrieve -b -i -n -h -f -u SOURCE_ORG_NAME\r\n```\r\n\r\nConvert the source to Metadata API (instead of Source API)\r\n\r\n```shell\r\nsfdx ext:mdapi:convert --sourcedirectory src --targetdirectory ./\r\n```\r\n\r\nClean up the Source API folder\r\n\r\n```shell\r\nrm -rf src\r\n```\r\n\r\n> If any of this falls over, you may need to either update the `sfdx-ext` plugin or remove un-parsable files.\r\n\r\n## Deploy code back to DevHub\r\n\r\nDeploy all of type\r\n\r\n```shell\r\nsfdx force:source:deploy -m ApexPage, ApexClasses, LightningComponentBundle -u ALIAS_FOR_YOUR_DEV_HUB\r\n```\r\n\r\nDeploy specific component by path\r\n\r\n```shell\r\nsfdx force:source:deploy -p force-app/main/default/lwc/SINGLE_COMPONENT_NAME -u ALIAS_FOR_YOUR_DEV_HUB\r\n```\r\n\r\n## Fetch / Pull Data\r\n\r\nRetrieve All ApexClasses, ApexPages, LWC's\r\n\r\n```shell\r\nsfdx force:source:retrieve -m ApexClass, ApexPage, LightningComponentBundle -u ALIAS_FOR_YOUR_DEV_HUB\r\n```\r\n\r\n[Metadata Ref](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_types_list.htm)\r\n\r\n## Create / Import Data\r\n\r\n> data can be retrieved from a sandbox using `sfdx force:source:retrieve -m CustomObject -u SANDBOX_SOURCE_ORG`\r\n\r\n## Create Data\r\n\r\nSpecify the Object type and the fields 'n values\r\n\r\n```shell\r\nsfdx force:data:record:create -s Account -v \"Name='Marriott Marquis' BillingStreet='780 Mission St' BillingCity='San Francisco' BillingState='CA' BillingPostalCode='94103' Phone='(415) 896-1600' Website='www.marriott.com'\"\r\n```\r\n\r\n#### Export Data\r\n\r\nUsing SQL to JSON data\r\n\r\n```shell\r\nsfdx force:data:tree:export -q \"SELECT Name, BillingStreet, BillingCity, BillingState, BillingPostalCode, Phone, Website FROM Account WHERE BillingStreet != NULL AND BillingCity != NULL and BillingState != NULL\\\" -d ./data\r\n```\r\n\r\n#### Import Data\r\n\r\n```shell\r\nsfdx force:data:tree:import --sobjecttreefiles data/Account.json\r\n```\r\n\r\n## Create an Apex Class\r\n\r\n```shell\r\nsfdx force:apex:class:create -n YourControllerName -d force-app/main/default/classes\r\n```\r\n\r\n## `config/project-scratch-def.json`\r\n\r\nDisable Lightning Experience caching\r\n\r\n```json\r\n\"settings\": {\r\n  \"orgPreferenceSettings\": {\r\n    \"s1EncryptedStoragePref2\": false\r\n  }\r\n}\r\n```\r\n\r\n> Disabling secure and persistent browser caching has a significant negative performance impact on Lightning Experience. Always enable the setting in production orgs.\r\n\r\n## Useful Commands\r\n\r\n- See config options `sfdx force:config:set -h`\r\n- See all commands `sfdx force:doc:commands:list`\r\n- Refresh SObject cache for VS Code intellisense `sfdx sobject definitions refresh -u SCRATCH_ORG_USERNAME`\r\n","slug":"sfdx-how-to-setup-a-scratch-org","data":{"title":"SFDX: How to setup a Scratch Org","date":"2019-12-09T00:00:00.000Z","color":"#8e1b0b","description":"How the heck do I set up a scratch org using sfdx? Well, you're in the right place","excerpt":"How to setup a scratch org using sfdx (feat. some extra commands)","tags":["salesforce","javascript"],"slug":"sfdx-how-to-setup-a-scratch-org","readingTime":{"text":"4 min read","minutes":3.815,"time":228900,"words":763},"dateFormatted":"9 December 2019","editedDate":"","editedDateFormatted":""}},{"content":"\r\nVS Code's Workspaces allow you to customise both the UI and functionality of the IDE at a project level. Workspaces settings override `User Settings` and are useful for sharing project settings with other devs and allow for project specific functionality and customisation.\r\n\r\nTo open Workspace Settings use the shortcut <kbd>Ctrl</kbd> + <kbd>,</kbd>. You can either edit the settings using the UI on this view or click the `{ }` in the top right corner to edit the `JSON` file.\r\n\r\n### What are they good for?\r\n\r\n- Adjusting `titleBar` colors to differentiate between multiple projects.\r\n- `search.exclude` to hide `dist` / `plugins` / `vendor` / `node_modules` folders from search results.\r\n- Exportable config allows sharing with co-workers on a per project basis.\r\n- Multiple folder paths on one project (handy if frontend and backend live in separate repositories)\r\n\r\n```json\r\n\"folders\": [\r\n  {\r\n    \"path\": \"C:\\\\laragon\\\\www\\\\backend_server\"\r\n  },\r\n  {\r\n    \"path\": \"C:\\\\Github\\\\front_end_ui\"\r\n  }\r\n],\r\n```\r\n\r\n### My Workspace Starter Settings\r\n\r\nThis is what I copy in to when I spool up a new project as a base - <a href=\"https://gist.github.com/lukethacoder/eecfc34c9c2bc63e87947d55d5b8b786\" target=\"_blank\">Gist</a>\r\n\r\n```json\r\n{\r\n  \"folders\": [\r\n    {\r\n      \"path\": \"C:\\\\Github\\\\PROJECT_NAME\"\r\n    }\r\n  ],\r\n  \"settings\": {\r\n    \"workbench.colorCustomizations\": {\r\n      \"titleBar.activeBackground\": \"#141414\",\r\n      \"titleBar.activeForeground\": \"#FFC87F\",\r\n      \"titleBar.inactiveBackground\": \"#696969\",\r\n      \"titleBar.inactiveForeground\": \"#FFC87F\",\r\n      \"sash.hoverBorder\": \"#FFC87F\"\r\n    },\r\n    \"search.exclude\": {\r\n      \".cache\": true,\r\n      \".vscode\": true,\r\n      \"node_modules\": true\r\n    },\r\n    \"window.title\": \"${rootName}\",\r\n    \"editor.cursorSmoothCaretAnimation\": true\r\n  }\r\n}\r\n```\r\n\r\n### So what do you use?\r\n\r\nWhat other handy settings should other developers be using with their workspaces?\r\n\r\n### References\r\n\r\n[User and Workspace Settings](!https://code.visualstudio.com/docs/getstarted/settings)\r\n","slug":"up-your-vs-code-game-with-workspaces","data":{"title":"Up Your VS Code Game with Workspaces","date":"2019-06-07T00:00:00.000Z","edited_date":"2022-11-24","color":"#0079ba","description":"VS Code's Workspaces allow you to customise both the UI and functionality of the IDE at a project level.","excerpt":"VS Code's Workspaces allow you to customise both the UI and functionality of the IDE at a project level.","tags":["vscode","config"],"dev_to_id":"118546","dev_url":"/up-your-vs-code-game-with-workspaces-4fp5","slug":"up-your-vs-code-game-with-workspaces","readingTime":{"text":"2 min read","minutes":1.2,"time":72000,"words":240},"dateFormatted":"7 June 2019","editedDate":"","editedDateFormatted":""}}]